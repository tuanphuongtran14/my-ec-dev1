input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input CartItem {
  product: ID!
  color: String!
  qty: Int!
}

input ProductFilter {
  name: String
  minPrice: Int
  maxPrice: Int
  minRam: Int
  maxRam: Int
  screenPanel: String
  screenResolution: String
  minScreenSize: Float
  maxScreenSize: Float
  minBatteryCapacity: Int
  maxBatteryCapacity: Int
  platform: String
  brand: String
}

type Brand {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

type BrandConnection {
  values: [Brand]
  groupBy: BrandGroupBy
  aggregate: BrandAggregator
}

type BrandAggregator {
  count: Int
  totalCount: Int
}

type BrandGroupBy {
  id: [BrandConnectionId]
  _id: [BrandConnection_id]
  createdAt: [BrandConnectionCreatedAt]
  updatedAt: [BrandConnectionUpdatedAt]
  name: [BrandConnectionName]
  slug: [BrandConnectionSlug]
  published_at: [BrandConnectionPublished_at]
}

type BrandConnectionId {
  key: ID
  connection: BrandConnection
}

type BrandConnection_id {
  key: ID
  connection: BrandConnection
}

type BrandConnectionCreatedAt {
  key: DateTime
  connection: BrandConnection
}

type BrandConnectionUpdatedAt {
  key: DateTime
  connection: BrandConnection
}

type BrandConnectionName {
  key: String
  connection: BrandConnection
}

type BrandConnectionSlug {
  key: String
  connection: BrandConnection
}

type BrandConnectionPublished_at {
  key: DateTime
  connection: BrandConnection
}

input BrandInput {
  name: String!
  slug: String
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBrandInput {
  name: String
  slug: String
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBrandInput {
  data: BrandInput
}

type createBrandPayload {
  brand: Brand
}

input updateBrandInput {
  where: InputID
  data: editBrandInput
}

type updateBrandPayload {
  brand: Brand
}

input deleteBrandInput {
  where: InputID
}

type deleteBrandPayload {
  brand: Brand
}

type Cart {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: UsersPermissionsUser
  total_price: Long
  items(sort: String, limit: Int, start: Int, where: JSON): [OrderedItem]
}

type CartConnection {
  values: [Cart]
  groupBy: CartGroupBy
  aggregate: CartAggregator
}

type CartAggregator {
  count: Int
  totalCount: Int
}

type CartGroupBy {
  id: [CartConnectionId]
  _id: [CartConnection_id]
  createdAt: [CartConnectionCreatedAt]
  updatedAt: [CartConnectionUpdatedAt]
  user: [CartConnectionUser]
  total_price: [CartConnectionTotal_price]
}

type CartConnectionId {
  key: ID
  connection: CartConnection
}

type CartConnection_id {
  key: ID
  connection: CartConnection
}

type CartConnectionCreatedAt {
  key: DateTime
  connection: CartConnection
}

type CartConnectionUpdatedAt {
  key: DateTime
  connection: CartConnection
}

type CartConnectionUser {
  key: ID
  connection: CartConnection
}

type CartConnectionTotal_price {
  key: ID
  connection: CartConnection
}

input CartInput {
  user: ID
  total_price: Long
  items: [ID]
  created_by: ID
  updated_by: ID
}

input editCartInput {
  user: ID
  total_price: Long
  items: [ID]
  created_by: ID
  updated_by: ID
}

input createCartInput {
  data: CartInput
}

type createCartPayload {
  cart: Cart
}

input updateCartInput {
  where: InputID
  data: editCartInput
}

type updateCartPayload {
  cart: Cart
}

input deleteCartInput {
  where: InputID
}

type deleteCartPayload {
  cart: Cart
}

enum ENUM_ORDER_STATUS {
  Pending
  Confirmed
  Delivery
  Delivered
}

enum ENUM_ORDER_PAYMENT_METHOD {
  COD
  ZaloPay
  VnPay
  MasterCard
}

type Order {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  consignee_name: String!
  consignee_phone: String!
  email: String
  address_line_1: String
  district: String
  city: String
  status: ENUM_ORDER_STATUS
  isPaid: Boolean
  payment_method: ENUM_ORDER_PAYMENT_METHOD
  total_price: Long
  published_at: DateTime
  items(sort: String, limit: Int, start: Int, where: JSON): [OrderedItem]
}

type OrderConnection {
  values: [Order]
  groupBy: OrderGroupBy
  aggregate: OrderAggregator
}

type OrderAggregator {
  count: Int
  totalCount: Int
}

type OrderGroupBy {
  id: [OrderConnectionId]
  _id: [OrderConnection_id]
  createdAt: [OrderConnectionCreatedAt]
  updatedAt: [OrderConnectionUpdatedAt]
  consignee_name: [OrderConnectionConsignee_name]
  consignee_phone: [OrderConnectionConsignee_phone]
  email: [OrderConnectionEmail]
  address_line_1: [OrderConnectionAddress_line_1]
  district: [OrderConnectionDistrict]
  city: [OrderConnectionCity]
  status: [OrderConnectionStatus]
  isPaid: [OrderConnectionIsPaid]
  payment_method: [OrderConnectionPayment_method]
  total_price: [OrderConnectionTotal_price]
  published_at: [OrderConnectionPublished_at]
}

type OrderConnectionId {
  key: ID
  connection: OrderConnection
}

type OrderConnection_id {
  key: ID
  connection: OrderConnection
}

type OrderConnectionCreatedAt {
  key: DateTime
  connection: OrderConnection
}

type OrderConnectionUpdatedAt {
  key: DateTime
  connection: OrderConnection
}

type OrderConnectionConsignee_name {
  key: String
  connection: OrderConnection
}

type OrderConnectionConsignee_phone {
  key: String
  connection: OrderConnection
}

type OrderConnectionEmail {
  key: String
  connection: OrderConnection
}

type OrderConnectionAddress_line_1 {
  key: String
  connection: OrderConnection
}

type OrderConnectionDistrict {
  key: String
  connection: OrderConnection
}

type OrderConnectionCity {
  key: String
  connection: OrderConnection
}

type OrderConnectionStatus {
  key: String
  connection: OrderConnection
}

type OrderConnectionIsPaid {
  key: Boolean
  connection: OrderConnection
}

type OrderConnectionPayment_method {
  key: String
  connection: OrderConnection
}

type OrderConnectionTotal_price {
  key: ID
  connection: OrderConnection
}

type OrderConnectionPublished_at {
  key: DateTime
  connection: OrderConnection
}

input OrderInput {
  items: [ID]
  consignee_name: String!
  consignee_phone: String!
  email: String
  address_line_1: String
  district: String
  city: String
  status: ENUM_ORDER_STATUS
  isPaid: Boolean
  payment_method: ENUM_ORDER_PAYMENT_METHOD
  total_price: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editOrderInput {
  items: [ID]
  consignee_name: String
  consignee_phone: String
  email: String
  address_line_1: String
  district: String
  city: String
  status: ENUM_ORDER_STATUS
  isPaid: Boolean
  payment_method: ENUM_ORDER_PAYMENT_METHOD
  total_price: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createOrderInput {
  data: OrderInput
}

type createOrderPayload {
  order: Order
}

input updateOrderInput {
  where: InputID
  data: editOrderInput
}

type updateOrderPayload {
  order: Order
}

input deleteOrderInput {
  where: InputID
}

type deleteOrderPayload {
  order: Order
}

type OrderedItem {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  product: Product
  color: String
  qty: Int
  price: Long
}

type OrderedItemConnection {
  values: [OrderedItem]
  groupBy: OrderedItemGroupBy
  aggregate: OrderedItemAggregator
}

type OrderedItemAggregator {
  count: Int
  totalCount: Int
  sum: OrderedItemAggregatorSum
  avg: OrderedItemAggregatorAvg
  min: OrderedItemAggregatorMin
  max: OrderedItemAggregatorMax
}

type OrderedItemAggregatorSum {
  qty: Float
}

type OrderedItemAggregatorAvg {
  qty: Float
}

type OrderedItemAggregatorMin {
  qty: Float
}

type OrderedItemAggregatorMax {
  qty: Float
}

type OrderedItemGroupBy {
  id: [OrderedItemConnectionId]
  _id: [OrderedItemConnection_id]
  createdAt: [OrderedItemConnectionCreatedAt]
  updatedAt: [OrderedItemConnectionUpdatedAt]
  product: [OrderedItemConnectionProduct]
  color: [OrderedItemConnectionColor]
  qty: [OrderedItemConnectionQty]
  price: [OrderedItemConnectionPrice]
}

type OrderedItemConnectionId {
  key: ID
  connection: OrderedItemConnection
}

type OrderedItemConnection_id {
  key: ID
  connection: OrderedItemConnection
}

type OrderedItemConnectionCreatedAt {
  key: DateTime
  connection: OrderedItemConnection
}

type OrderedItemConnectionUpdatedAt {
  key: DateTime
  connection: OrderedItemConnection
}

type OrderedItemConnectionProduct {
  key: ID
  connection: OrderedItemConnection
}

type OrderedItemConnectionColor {
  key: String
  connection: OrderedItemConnection
}

type OrderedItemConnectionQty {
  key: Int
  connection: OrderedItemConnection
}

type OrderedItemConnectionPrice {
  key: ID
  connection: OrderedItemConnection
}

input OrderedItemInput {
  product: ID
  color: String
  qty: Int
  price: Long
  created_by: ID
  updated_by: ID
}

input editOrderedItemInput {
  product: ID
  color: String
  qty: Int
  price: Long
  created_by: ID
  updated_by: ID
}

input createOrderedItemInput {
  data: OrderedItemInput
}

type createOrderedItemPayload {
  orderedItem: OrderedItem
}

input updateOrderedItemInput {
  where: InputID
  data: editOrderedItemInput
}

type updateOrderedItemPayload {
  orderedItem: OrderedItem
}

input deleteOrderedItemInput {
  where: InputID
}

type deleteOrderedItemPayload {
  orderedItem: OrderedItem
}

enum ENUM_PRODUCT_PLATFORM_NAME {
  Android
  iOS
}

enum ENUM_PRODUCT_BATTERY_TYPE {
  LiIon
  LiPo
}

type Product {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  price: Int!
  cpu: String!
  gpu: String!
  screen_size: Float!
  screen_panel: String!
  screen_resolution: String!
  height: Float!
  width: Float!
  depth: Float
  weight: Float!
  ram: Int!
  rom: Int!
  platform_version: String!
  full_desc: String
  short_desc: String
  platform_name: ENUM_PRODUCT_PLATFORM_NAME!
  sales_percentage: Int
  inclusion_box: String!
  warranty: String
  product_condition: String
  battery_capacity: Int!
  battery_type: ENUM_PRODUCT_BATTERY_TYPE
  options: [ComponentProductOption]
  thumbnail: UploadFile
  brand: Brand
  published_at: DateTime
}

type ProductConnection {
  values: [Product]
  groupBy: ProductGroupBy
  aggregate: ProductAggregator
}

type ProductAggregator {
  count: Int
  totalCount: Int
  sum: ProductAggregatorSum
  avg: ProductAggregatorAvg
  min: ProductAggregatorMin
  max: ProductAggregatorMax
}

type ProductAggregatorSum {
  price: Float
  screen_size: Float
  height: Float
  width: Float
  depth: Float
  weight: Float
  ram: Float
  rom: Float
  sales_percentage: Float
  battery_capacity: Float
}

type ProductAggregatorAvg {
  price: Float
  screen_size: Float
  height: Float
  width: Float
  depth: Float
  weight: Float
  ram: Float
  rom: Float
  sales_percentage: Float
  battery_capacity: Float
}

type ProductAggregatorMin {
  price: Float
  screen_size: Float
  height: Float
  width: Float
  depth: Float
  weight: Float
  ram: Float
  rom: Float
  sales_percentage: Float
  battery_capacity: Float
}

type ProductAggregatorMax {
  price: Float
  screen_size: Float
  height: Float
  width: Float
  depth: Float
  weight: Float
  ram: Float
  rom: Float
  sales_percentage: Float
  battery_capacity: Float
}

type ProductGroupBy {
  id: [ProductConnectionId]
  _id: [ProductConnection_id]
  createdAt: [ProductConnectionCreatedAt]
  updatedAt: [ProductConnectionUpdatedAt]
  name: [ProductConnectionName]
  slug: [ProductConnectionSlug]
  price: [ProductConnectionPrice]
  cpu: [ProductConnectionCpu]
  gpu: [ProductConnectionGpu]
  screen_size: [ProductConnectionScreen_size]
  screen_panel: [ProductConnectionScreen_panel]
  screen_resolution: [ProductConnectionScreen_resolution]
  height: [ProductConnectionHeight]
  width: [ProductConnectionWidth]
  depth: [ProductConnectionDepth]
  weight: [ProductConnectionWeight]
  ram: [ProductConnectionRam]
  rom: [ProductConnectionRom]
  platform_version: [ProductConnectionPlatform_version]
  full_desc: [ProductConnectionFull_desc]
  short_desc: [ProductConnectionShort_desc]
  platform_name: [ProductConnectionPlatform_name]
  sales_percentage: [ProductConnectionSales_percentage]
  inclusion_box: [ProductConnectionInclusion_box]
  warranty: [ProductConnectionWarranty]
  product_condition: [ProductConnectionProduct_condition]
  battery_capacity: [ProductConnectionBattery_capacity]
  battery_type: [ProductConnectionBattery_type]
  thumbnail: [ProductConnectionThumbnail]
  brand: [ProductConnectionBrand]
  published_at: [ProductConnectionPublished_at]
}

type ProductConnectionId {
  key: ID
  connection: ProductConnection
}

type ProductConnection_id {
  key: ID
  connection: ProductConnection
}

type ProductConnectionCreatedAt {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionUpdatedAt {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionName {
  key: String
  connection: ProductConnection
}

type ProductConnectionSlug {
  key: String
  connection: ProductConnection
}

type ProductConnectionPrice {
  key: Int
  connection: ProductConnection
}

type ProductConnectionCpu {
  key: String
  connection: ProductConnection
}

type ProductConnectionGpu {
  key: String
  connection: ProductConnection
}

type ProductConnectionScreen_size {
  key: Float
  connection: ProductConnection
}

type ProductConnectionScreen_panel {
  key: String
  connection: ProductConnection
}

type ProductConnectionScreen_resolution {
  key: String
  connection: ProductConnection
}

type ProductConnectionHeight {
  key: Float
  connection: ProductConnection
}

type ProductConnectionWidth {
  key: Float
  connection: ProductConnection
}

type ProductConnectionDepth {
  key: Float
  connection: ProductConnection
}

type ProductConnectionWeight {
  key: Float
  connection: ProductConnection
}

type ProductConnectionRam {
  key: Int
  connection: ProductConnection
}

type ProductConnectionRom {
  key: Int
  connection: ProductConnection
}

type ProductConnectionPlatform_version {
  key: String
  connection: ProductConnection
}

type ProductConnectionFull_desc {
  key: String
  connection: ProductConnection
}

type ProductConnectionShort_desc {
  key: String
  connection: ProductConnection
}

type ProductConnectionPlatform_name {
  key: String
  connection: ProductConnection
}

type ProductConnectionSales_percentage {
  key: Int
  connection: ProductConnection
}

type ProductConnectionInclusion_box {
  key: String
  connection: ProductConnection
}

type ProductConnectionWarranty {
  key: String
  connection: ProductConnection
}

type ProductConnectionProduct_condition {
  key: String
  connection: ProductConnection
}

type ProductConnectionBattery_capacity {
  key: Int
  connection: ProductConnection
}

type ProductConnectionBattery_type {
  key: String
  connection: ProductConnection
}

type ProductConnectionThumbnail {
  key: ID
  connection: ProductConnection
}

type ProductConnectionBrand {
  key: ID
  connection: ProductConnection
}

type ProductConnectionPublished_at {
  key: DateTime
  connection: ProductConnection
}

input ProductInput {
  name: String!
  slug: String!
  price: Int!
  cpu: String!
  gpu: String!
  screen_size: Float!
  screen_panel: String!
  screen_resolution: String!
  height: Float!
  width: Float!
  depth: Float
  weight: Float!
  ram: Int!
  rom: Int!
  platform_version: String!
  full_desc: String
  short_desc: String
  platform_name: ENUM_PRODUCT_PLATFORM_NAME
  sales_percentage: Int
  inclusion_box: String
  warranty: String
  product_condition: String
  battery_capacity: Int!
  battery_type: ENUM_PRODUCT_BATTERY_TYPE
  options: [ComponentProductOptionInput]
  thumbnail: ID
  brand: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductInput {
  name: String
  slug: String
  price: Int
  cpu: String
  gpu: String
  screen_size: Float
  screen_panel: String
  screen_resolution: String
  height: Float
  width: Float
  depth: Float
  weight: Float
  ram: Int
  rom: Int
  platform_version: String
  full_desc: String
  short_desc: String
  platform_name: ENUM_PRODUCT_PLATFORM_NAME
  sales_percentage: Int
  inclusion_box: String
  warranty: String
  product_condition: String
  battery_capacity: Int
  battery_type: ENUM_PRODUCT_BATTERY_TYPE
  options: [editComponentProductOptionInput]
  thumbnail: ID
  brand: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Product
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

type I18NLocale {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentProductOption {
  id: ID!
  _id: ID!
  color: String!
  quantity_in_stock: Int
  sold_quantity: Int
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentProductOptionInput {
  color: String!
  images: [ID]
  quantity_in_stock: Int
  sold_quantity: Int
}

input editComponentProductOptionInput {
  id: ID
  color: String
  images: [ID]
  quantity_in_stock: Int
  sold_quantity: Int
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Brand | BrandConnection | BrandAggregator | BrandGroupBy | BrandConnectionId | BrandConnection_id | BrandConnectionCreatedAt | BrandConnectionUpdatedAt | BrandConnectionName | BrandConnectionSlug | BrandConnectionPublished_at | createBrandPayload | updateBrandPayload | deleteBrandPayload | Cart | CartConnection | CartAggregator | CartGroupBy | CartConnectionId | CartConnection_id | CartConnectionCreatedAt | CartConnectionUpdatedAt | CartConnectionUser | CartConnectionTotal_price | createCartPayload | updateCartPayload | deleteCartPayload | Order | OrderConnection | OrderAggregator | OrderGroupBy | OrderConnectionId | OrderConnection_id | OrderConnectionCreatedAt | OrderConnectionUpdatedAt | OrderConnectionConsignee_name | OrderConnectionConsignee_phone | OrderConnectionEmail | OrderConnectionAddress_line_1 | OrderConnectionDistrict | OrderConnectionCity | OrderConnectionStatus | OrderConnectionIsPaid | OrderConnectionPayment_method | OrderConnectionTotal_price | OrderConnectionPublished_at | createOrderPayload | updateOrderPayload | deleteOrderPayload | OrderedItem | OrderedItemConnection | OrderedItemAggregator | OrderedItemAggregatorSum | OrderedItemAggregatorAvg | OrderedItemAggregatorMin | OrderedItemAggregatorMax | OrderedItemGroupBy | OrderedItemConnectionId | OrderedItemConnection_id | OrderedItemConnectionCreatedAt | OrderedItemConnectionUpdatedAt | OrderedItemConnectionProduct | OrderedItemConnectionColor | OrderedItemConnectionQty | OrderedItemConnectionPrice | createOrderedItemPayload | updateOrderedItemPayload | deleteOrderedItemPayload | Product | ProductConnection | ProductAggregator | ProductAggregatorSum | ProductAggregatorAvg | ProductAggregatorMin | ProductAggregatorMax | ProductGroupBy | ProductConnectionId | ProductConnection_id | ProductConnectionCreatedAt | ProductConnectionUpdatedAt | ProductConnectionName | ProductConnectionSlug | ProductConnectionPrice | ProductConnectionCpu | ProductConnectionGpu | ProductConnectionScreen_size | ProductConnectionScreen_panel | ProductConnectionScreen_resolution | ProductConnectionHeight | ProductConnectionWidth | ProductConnectionDepth | ProductConnectionWeight | ProductConnectionRam | ProductConnectionRom | ProductConnectionPlatform_version | ProductConnectionFull_desc | ProductConnectionShort_desc | ProductConnectionPlatform_name | ProductConnectionSales_percentage | ProductConnectionInclusion_box | ProductConnectionWarranty | ProductConnectionProduct_condition | ProductConnectionBattery_capacity | ProductConnectionBattery_type | ProductConnectionThumbnail | ProductConnectionBrand | ProductConnectionPublished_at | createProductPayload | updateProductPayload | deleteProductPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentProductOption

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  brand(id: ID!, publicationState: PublicationState): Brand
  brands(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Brand]
  brandsConnection(sort: String, limit: Int, start: Int, where: JSON): BrandConnection
  cart(id: ID!, publicationState: PublicationState): Cart
  carts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Cart]
  cartsConnection(sort: String, limit: Int, start: Int, where: JSON): CartConnection
  order(id: ID!, publicationState: PublicationState): Order
  orders(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Order]
  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrderConnection
  orderedItem(id: ID!, publicationState: PublicationState): OrderedItem
  orderedItems(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [OrderedItem]
  orderedItemsConnection(sort: String, limit: Int, start: Int, where: JSON): OrderedItemConnection
  product(id: ID!, publicationState: PublicationState): Product
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Product]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
  getCart: Cart!
  searchProducts(filter: ProductFilter, limit: Int, skip: Int, sort: [String]): [Product]!
  findSimilarProducts(id: ID!, limit: Int, skip: Int, sort: [String]): [Product]!
}

type Mutation {
  createBrand(input: createBrandInput): createBrandPayload
  updateBrand(input: updateBrandInput): updateBrandPayload
  deleteBrand(input: deleteBrandInput): deleteBrandPayload
  createCart(input: createCartInput): createCartPayload
  updateCart(input: updateCartInput): updateCartPayload
  deleteCart(input: deleteCartInput): deleteCartPayload
  createOrder(input: createOrderInput): createOrderPayload
  updateOrder(input: updateOrderInput): updateOrderPayload
  deleteOrder(input: deleteOrderInput): deleteOrderPayload
  createOrderedItem(input: createOrderedItemInput): createOrderedItemPayload
  updateOrderedItem(input: updateOrderedItemInput): updateOrderedItemPayload
  deleteOrderedItem(input: deleteOrderedItemInput): deleteOrderedItemPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  addItemToCart(item: CartItem!): Cart!
  removeItemFromCart(itemId: ID!): Cart!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
