input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input CartDetail {
  product: ID!
  quantity: Int!
  selectedColor: String!
}

type ResponseMessage {
  statusCode: Int!
  message: String!
}

input ProductFilter {
  id: ID
  name: String
  minPrice: Int
  maxPrice: Int
  screenType: String
  minScreenSize: Float
  maxScreenSize: Float
  minRam: Float
  maxRam: Float
  minInternalMem: Int
  maxInternalMem: Int
  platform: String
  brand: String
  color: String
  isSales: Boolean
}

type CartItem {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  product: Products
  quantity: Int
  published_at: DateTime
}

type CartItemConnection {
  values: [CartItem]
  groupBy: CartItemGroupBy
  aggregate: CartItemAggregator
}

type CartItemAggregator {
  count: Int
  totalCount: Int
  sum: CartItemAggregatorSum
  avg: CartItemAggregatorAvg
  min: CartItemAggregatorMin
  max: CartItemAggregatorMax
}

type CartItemAggregatorSum {
  quantity: Float
}

type CartItemAggregatorAvg {
  quantity: Float
}

type CartItemAggregatorMin {
  quantity: Float
}

type CartItemAggregatorMax {
  quantity: Float
}

type CartItemGroupBy {
  id: [CartItemConnectionId]
  _id: [CartItemConnection_id]
  createdAt: [CartItemConnectionCreatedAt]
  updatedAt: [CartItemConnectionUpdatedAt]
  product: [CartItemConnectionProduct]
  quantity: [CartItemConnectionQuantity]
  published_at: [CartItemConnectionPublished_at]
}

type CartItemConnectionId {
  key: ID
  connection: CartItemConnection
}

type CartItemConnection_id {
  key: ID
  connection: CartItemConnection
}

type CartItemConnectionCreatedAt {
  key: DateTime
  connection: CartItemConnection
}

type CartItemConnectionUpdatedAt {
  key: DateTime
  connection: CartItemConnection
}

type CartItemConnectionProduct {
  key: ID
  connection: CartItemConnection
}

type CartItemConnectionQuantity {
  key: Int
  connection: CartItemConnection
}

type CartItemConnectionPublished_at {
  key: DateTime
  connection: CartItemConnection
}

input CartItemInput {
  product: ID
  quantity: Int
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCartItemInput {
  product: ID
  quantity: Int
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCartItemInput {
  data: CartItemInput
}

type createCartItemPayload {
  cartItem: CartItem
}

input updateCartItemInput {
  where: InputID
  data: editCartItemInput
}

type updateCartItemPayload {
  cartItem: CartItem
}

input deleteCartItemInput {
  where: InputID
}

type deleteCartItemPayload {
  cartItem: CartItem
}

type Categories {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type CategoriesConnection {
  values: [Categories]
  groupBy: CategoriesGroupBy
  aggregate: CategoriesAggregator
}

type CategoriesAggregator {
  count: Int
  totalCount: Int
}

type CategoriesGroupBy {
  id: [CategoriesConnectionId]
  _id: [CategoriesConnection_id]
  createdAt: [CategoriesConnectionCreatedAt]
  updatedAt: [CategoriesConnectionUpdatedAt]
  name: [CategoriesConnectionName]
  slug: [CategoriesConnectionSlug]
  published_at: [CategoriesConnectionPublished_at]
}

type CategoriesConnectionId {
  key: ID
  connection: CategoriesConnection
}

type CategoriesConnection_id {
  key: ID
  connection: CategoriesConnection
}

type CategoriesConnectionCreatedAt {
  key: DateTime
  connection: CategoriesConnection
}

type CategoriesConnectionUpdatedAt {
  key: DateTime
  connection: CategoriesConnection
}

type CategoriesConnectionName {
  key: String
  connection: CategoriesConnection
}

type CategoriesConnectionSlug {
  key: String
  connection: CategoriesConnection
}

type CategoriesConnectionPublished_at {
  key: DateTime
  connection: CategoriesConnection
}

input CategoryInput {
  products: [ID]
  name: String!
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  products: [ID]
  name: String
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Categories
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Categories
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Categories
}

type Orders {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  users_permissions_user: UsersPermissionsUser
  status: String
  total_price: Long
  Create_at: DateTime
  published_at: DateTime
}

type OrdersConnection {
  values: [Orders]
  groupBy: OrdersGroupBy
  aggregate: OrdersAggregator
}

type OrdersAggregator {
  count: Int
  totalCount: Int
}

type OrdersGroupBy {
  id: [OrdersConnectionId]
  _id: [OrdersConnection_id]
  createdAt: [OrdersConnectionCreatedAt]
  updatedAt: [OrdersConnectionUpdatedAt]
  users_permissions_user: [OrdersConnectionUsers_permissions_user]
  status: [OrdersConnectionStatus]
  total_price: [OrdersConnectionTotal_price]
  Create_at: [OrdersConnectionCreate_at]
  published_at: [OrdersConnectionPublished_at]
}

type OrdersConnectionId {
  key: ID
  connection: OrdersConnection
}

type OrdersConnection_id {
  key: ID
  connection: OrdersConnection
}

type OrdersConnectionCreatedAt {
  key: DateTime
  connection: OrdersConnection
}

type OrdersConnectionUpdatedAt {
  key: DateTime
  connection: OrdersConnection
}

type OrdersConnectionUsers_permissions_user {
  key: ID
  connection: OrdersConnection
}

type OrdersConnectionStatus {
  key: String
  connection: OrdersConnection
}

type OrdersConnectionTotal_price {
  key: ID
  connection: OrdersConnection
}

type OrdersConnectionCreate_at {
  key: DateTime
  connection: OrdersConnection
}

type OrdersConnectionPublished_at {
  key: DateTime
  connection: OrdersConnection
}

input OrderInput {
  users_permissions_user: ID
  status: String
  total_price: Long
  Create_at: DateTime
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editOrderInput {
  users_permissions_user: ID
  status: String
  total_price: Long
  Create_at: DateTime
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createOrderInput {
  data: OrderInput
}

type createOrderPayload {
  order: Orders
}

input updateOrderInput {
  where: InputID
  data: editOrderInput
}

type updateOrderPayload {
  order: Orders
}

input deleteOrderInput {
  where: InputID
}

type deleteOrderPayload {
  order: Orders
}

type Products {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  price: Long!
  category: Categories
  promotions: String!
  condition: String!
  boxIncluded: String!
  warranty: String!
  description: String!
  thumbnail: UploadFile
  salespercentage: Int
  slug: String
  build: ComponentSpecificationsBuild
  weight: Float
  cpu: String
  gpu: String
  mainCamera: [ComponentSpecificationsCamera]
  selfieCamera: [ComponentSpecificationsCamera]
  othersFeatures: [ComponentSpecificationsFeature]
  colors: [ComponentSpecificationsColor]
  internalMemory: Int
  ram: Float
  hasCardSlot: Boolean
  platformName: String
  platformVersion: String
  height: Float
  width: Float
  depth: Float
  charging: String
  baterryCapacity: Int
  baterryType: String
  screenType: String
  screenRatio: String
  resolution: String
  density: Int
  screenSize: Float
  published_at: DateTime
  cart_items(sort: String, limit: Int, start: Int, where: JSON): [CartItem]
}

type ProductsConnection {
  values: [Products]
  groupBy: ProductsGroupBy
  aggregate: ProductsAggregator
}

type ProductsAggregator {
  count: Int
  totalCount: Int
  sum: ProductsAggregatorSum
  avg: ProductsAggregatorAvg
  min: ProductsAggregatorMin
  max: ProductsAggregatorMax
}

type ProductsAggregatorSum {
  salespercentage: Float
  weight: Float
  internalMemory: Float
  ram: Float
  height: Float
  width: Float
  depth: Float
  baterryCapacity: Float
  density: Float
  screenSize: Float
}

type ProductsAggregatorAvg {
  salespercentage: Float
  weight: Float
  internalMemory: Float
  ram: Float
  height: Float
  width: Float
  depth: Float
  baterryCapacity: Float
  density: Float
  screenSize: Float
}

type ProductsAggregatorMin {
  salespercentage: Float
  weight: Float
  internalMemory: Float
  ram: Float
  height: Float
  width: Float
  depth: Float
  baterryCapacity: Float
  density: Float
  screenSize: Float
}

type ProductsAggregatorMax {
  salespercentage: Float
  weight: Float
  internalMemory: Float
  ram: Float
  height: Float
  width: Float
  depth: Float
  baterryCapacity: Float
  density: Float
  screenSize: Float
}

type ProductsGroupBy {
  id: [ProductsConnectionId]
  _id: [ProductsConnection_id]
  createdAt: [ProductsConnectionCreatedAt]
  updatedAt: [ProductsConnectionUpdatedAt]
  name: [ProductsConnectionName]
  price: [ProductsConnectionPrice]
  category: [ProductsConnectionCategory]
  promotions: [ProductsConnectionPromotions]
  condition: [ProductsConnectionCondition]
  boxIncluded: [ProductsConnectionBoxIncluded]
  warranty: [ProductsConnectionWarranty]
  description: [ProductsConnectionDescription]
  thumbnail: [ProductsConnectionThumbnail]
  salespercentage: [ProductsConnectionSalespercentage]
  slug: [ProductsConnectionSlug]
  build: [ProductsConnectionBuild]
  weight: [ProductsConnectionWeight]
  cpu: [ProductsConnectionCpu]
  gpu: [ProductsConnectionGpu]
  internalMemory: [ProductsConnectionInternalMemory]
  ram: [ProductsConnectionRam]
  hasCardSlot: [ProductsConnectionHasCardSlot]
  platformName: [ProductsConnectionPlatformName]
  platformVersion: [ProductsConnectionPlatformVersion]
  height: [ProductsConnectionHeight]
  width: [ProductsConnectionWidth]
  depth: [ProductsConnectionDepth]
  charging: [ProductsConnectionCharging]
  baterryCapacity: [ProductsConnectionBaterryCapacity]
  baterryType: [ProductsConnectionBaterryType]
  screenType: [ProductsConnectionScreenType]
  screenRatio: [ProductsConnectionScreenRatio]
  resolution: [ProductsConnectionResolution]
  density: [ProductsConnectionDensity]
  screenSize: [ProductsConnectionScreenSize]
  published_at: [ProductsConnectionPublished_at]
}

type ProductsConnectionId {
  key: ID
  connection: ProductsConnection
}

type ProductsConnection_id {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionCreatedAt {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionUpdatedAt {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionName {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionPrice {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionCategory {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionPromotions {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionCondition {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionBoxIncluded {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionWarranty {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionDescription {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionThumbnail {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionSalespercentage {
  key: Int
  connection: ProductsConnection
}

type ProductsConnectionSlug {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionBuild {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionWeight {
  key: Float
  connection: ProductsConnection
}

type ProductsConnectionCpu {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionGpu {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionInternalMemory {
  key: Int
  connection: ProductsConnection
}

type ProductsConnectionRam {
  key: Float
  connection: ProductsConnection
}

type ProductsConnectionHasCardSlot {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionPlatformName {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionPlatformVersion {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionHeight {
  key: Float
  connection: ProductsConnection
}

type ProductsConnectionWidth {
  key: Float
  connection: ProductsConnection
}

type ProductsConnectionDepth {
  key: Float
  connection: ProductsConnection
}

type ProductsConnectionCharging {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionBaterryCapacity {
  key: Int
  connection: ProductsConnection
}

type ProductsConnectionBaterryType {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionScreenType {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionScreenRatio {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionResolution {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionDensity {
  key: Int
  connection: ProductsConnection
}

type ProductsConnectionScreenSize {
  key: Float
  connection: ProductsConnection
}

type ProductsConnectionPublished_at {
  key: DateTime
  connection: ProductsConnection
}

input ProductInput {
  name: String!
  price: Long!
  category: ID
  promotions: String!
  condition: String!
  boxIncluded: String!
  warranty: String!
  description: String!
  thumbnail: ID
  salespercentage: Int
  slug: String
  cart_items: [ID]
  build: ComponentSpecificationsBuildInput!
  weight: Float
  cpu: String
  gpu: String
  mainCamera: [ComponentSpecificationsCameraInput]
  selfieCamera: [ComponentSpecificationsCameraInput]
  othersFeatures: [ComponentSpecificationsFeatureInput]
  colors: [ComponentSpecificationsColorInput]
  internalMemory: Int
  ram: Float
  hasCardSlot: Boolean
  platformName: String
  platformVersion: String
  height: Float
  width: Float
  depth: Float
  charging: String
  baterryCapacity: Int
  baterryType: String
  screenType: String
  screenRatio: String
  resolution: String
  density: Int
  screenSize: Float
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductInput {
  name: String
  price: Long
  category: ID
  promotions: String
  condition: String
  boxIncluded: String
  warranty: String
  description: String
  thumbnail: ID
  salespercentage: Int
  slug: String
  cart_items: [ID]
  build: editComponentSpecificationsBuildInput
  weight: Float
  cpu: String
  gpu: String
  mainCamera: [editComponentSpecificationsCameraInput]
  selfieCamera: [editComponentSpecificationsCameraInput]
  othersFeatures: [editComponentSpecificationsFeatureInput]
  colors: [editComponentSpecificationsColorInput]
  internalMemory: Int
  ram: Float
  hasCardSlot: Boolean
  platformName: String
  platformVersion: String
  height: Float
  width: Float
  depth: Float
  charging: String
  baterryCapacity: Int
  baterryType: String
  screenType: String
  screenRatio: String
  resolution: String
  density: Int
  screenSize: Float
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Products
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Products
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Products
}

type I18NLocale {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  cart: [ComponentUserUserCart]
  orders(sort: String, limit: Int, start: Int, where: JSON): [Orders]
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  cart: [ComponentUserUserCartInput]
  orders: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  cart: [editComponentUserUserCartInput]
  orders: [ID]
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentProductRating {
  id: ID!
  _id: ID!
  grade: Float
  votes: Int
}

input ComponentProductRatingInput {
  grade: Float
  votes: Int
}

input editComponentProductRatingInput {
  id: ID
  grade: Float
  votes: Int
}

type ComponentSpecificationsBattery {
  id: ID!
  _id: ID!
  type: String
  charging: String
  capacity: Int
}

input ComponentSpecificationsBatteryInput {
  type: String
  charging: String
  capacity: Int
}

input editComponentSpecificationsBatteryInput {
  id: ID
  type: String
  charging: String
  capacity: Int
}

type ComponentSpecificationsBuild {
  id: ID!
  _id: ID!
  front: String
  back: String
  frame: String
}

input ComponentSpecificationsBuildInput {
  front: String
  back: String
  frame: String
}

input editComponentSpecificationsBuildInput {
  id: ID
  front: String
  back: String
  frame: String
}

type ComponentSpecificationsCamera {
  id: ID!
  _id: ID!
  megapixels: Int
  lense: String
  focalLength: Float
  aperture: Float
}

input ComponentSpecificationsCameraInput {
  megapixels: Int
  lense: String
  focalLength: Float
  aperture: Float
}

input editComponentSpecificationsCameraInput {
  id: ID
  megapixels: Int
  lense: String
  focalLength: Float
  aperture: Float
}

type ComponentSpecificationsColor {
  id: ID!
  _id: ID!
  color: String
  quantity: Int
  sold: Int
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentSpecificationsColorInput {
  color: String
  images: [ID]
  quantity: Int
  sold: Int
}

input editComponentSpecificationsColorInput {
  id: ID
  color: String
  images: [ID]
  quantity: Int
  sold: Int
}

type ComponentSpecificationsDimensions {
  id: ID!
  _id: ID!
  height: Float
  width: Float
  depth: Float
}

input ComponentSpecificationsDimensionInput {
  height: Float
  width: Float
  depth: Float
}

input editComponentSpecificationsDimensionInput {
  id: ID
  height: Float
  width: Float
  depth: Float
}

type ComponentSpecificationsFeature {
  id: ID!
  _id: ID!
  name: String
}

input ComponentSpecificationsFeatureInput {
  name: String
}

input editComponentSpecificationsFeatureInput {
  id: ID
  name: String
}

type ComponentSpecificationsMemory {
  id: ID!
  _id: ID!
  internal: Int
  cardSlot: Boolean
  ram: Float
}

input ComponentSpecificationsMemoryInput {
  internal: Int
  cardSlot: Boolean
  ram: Float
}

input editComponentSpecificationsMemoryInput {
  id: ID
  internal: Int
  cardSlot: Boolean
  ram: Float
}

type ComponentSpecificationsNetwork {
  id: ID!
  _id: ID!
  network: String
}

input ComponentSpecificationsNetworkInput {
  network: String
}

input editComponentSpecificationsNetworkInput {
  id: ID
  network: String
}

type ComponentSpecificationsPlatform {
  id: ID!
  _id: ID!
  name: String
  version: String
}

input ComponentSpecificationsPlatformInput {
  name: String
  version: String
}

input editComponentSpecificationsPlatformInput {
  id: ID
  name: String
  version: String
}

type ComponentSpecificationsScreen {
  id: ID!
  _id: ID!
  screenType: String
  screenSize: Float
  resolution: String
  ratio: String
  density: String
}

input ComponentSpecificationsScreenInput {
  screenType: String
  screenSize: Float
  resolution: String
  ratio: String
  density: String
}

input editComponentSpecificationsScreenInput {
  id: ID
  screenType: String
  screenSize: Float
  resolution: String
  ratio: String
  density: String
}

type ComponentUserUserCart {
  id: ID!
  _id: ID!
  selectedColor: String
  product: Products
  quantity: Int
}

input ComponentUserUserCartInput {
  selectedColor: String
  product: ID
  quantity: Int
}

input editComponentUserUserCartInput {
  id: ID
  selectedColor: String
  product: ID
  quantity: Int
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | ResponseMessage | CartItem | CartItemConnection | CartItemAggregator | CartItemAggregatorSum | CartItemAggregatorAvg | CartItemAggregatorMin | CartItemAggregatorMax | CartItemGroupBy | CartItemConnectionId | CartItemConnection_id | CartItemConnectionCreatedAt | CartItemConnectionUpdatedAt | CartItemConnectionProduct | CartItemConnectionQuantity | CartItemConnectionPublished_at | createCartItemPayload | updateCartItemPayload | deleteCartItemPayload | Categories | CategoriesConnection | CategoriesAggregator | CategoriesGroupBy | CategoriesConnectionId | CategoriesConnection_id | CategoriesConnectionCreatedAt | CategoriesConnectionUpdatedAt | CategoriesConnectionName | CategoriesConnectionSlug | CategoriesConnectionPublished_at | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Orders | OrdersConnection | OrdersAggregator | OrdersGroupBy | OrdersConnectionId | OrdersConnection_id | OrdersConnectionCreatedAt | OrdersConnectionUpdatedAt | OrdersConnectionUsers_permissions_user | OrdersConnectionStatus | OrdersConnectionTotal_price | OrdersConnectionCreate_at | OrdersConnectionPublished_at | createOrderPayload | updateOrderPayload | deleteOrderPayload | Products | ProductsConnection | ProductsAggregator | ProductsAggregatorSum | ProductsAggregatorAvg | ProductsAggregatorMin | ProductsAggregatorMax | ProductsGroupBy | ProductsConnectionId | ProductsConnection_id | ProductsConnectionCreatedAt | ProductsConnectionUpdatedAt | ProductsConnectionName | ProductsConnectionPrice | ProductsConnectionCategory | ProductsConnectionPromotions | ProductsConnectionCondition | ProductsConnectionBoxIncluded | ProductsConnectionWarranty | ProductsConnectionDescription | ProductsConnectionThumbnail | ProductsConnectionSalespercentage | ProductsConnectionSlug | ProductsConnectionBuild | ProductsConnectionWeight | ProductsConnectionCpu | ProductsConnectionGpu | ProductsConnectionInternalMemory | ProductsConnectionRam | ProductsConnectionHasCardSlot | ProductsConnectionPlatformName | ProductsConnectionPlatformVersion | ProductsConnectionHeight | ProductsConnectionWidth | ProductsConnectionDepth | ProductsConnectionCharging | ProductsConnectionBaterryCapacity | ProductsConnectionBaterryType | ProductsConnectionScreenType | ProductsConnectionScreenRatio | ProductsConnectionResolution | ProductsConnectionDensity | ProductsConnectionScreenSize | ProductsConnectionPublished_at | createProductPayload | updateProductPayload | deleteProductPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentProductRating | ComponentSpecificationsBattery | ComponentSpecificationsBuild | ComponentSpecificationsCamera | ComponentSpecificationsColor | ComponentSpecificationsDimensions | ComponentSpecificationsFeature | ComponentSpecificationsMemory | ComponentSpecificationsNetwork | ComponentSpecificationsPlatform | ComponentSpecificationsScreen | ComponentUserUserCart

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  cartItem(id: ID!, publicationState: PublicationState): CartItem
  cartItems(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [CartItem]
  cartItemsConnection(sort: String, limit: Int, start: Int, where: JSON): CartItemConnection
  category(id: ID!, publicationState: PublicationState): Categories
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Categories]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoriesConnection
  order(id: ID!, publicationState: PublicationState): Orders
  orders(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Orders]
  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrdersConnection
  product(id: ID!, publicationState: PublicationState): Products
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Products]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductsConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
  cart: [ComponentUserUserCart]!
  productsByName(searchInput: String!): [Products]!
  newArrivalsProduct(limit: Int): [Products]!
  bestSellersProduct(limit: Int): [Products]!
  hotSalesProduct(limit: Int): [Products]!
  searchProduct(filter: ProductFilter, skip: Int, limit: Int): [Products]!
}

type Mutation {
  createCartItem(input: createCartItemInput): createCartItemPayload
  updateCartItem(input: updateCartItemInput): updateCartItemPayload
  deleteCartItem(input: deleteCartItemInput): deleteCartItemPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createOrder(input: createOrderInput): createOrderPayload
  updateOrder(input: updateOrderInput): updateOrderPayload
  deleteOrder(input: deleteOrderInput): deleteOrderPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  addItemsToCart(input: [CartDetail]!): ResponseMessage!
  deleteAllCartItems: ResponseMessage!
  deleteOneCartItem(id: ID!): ResponseMessage!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
